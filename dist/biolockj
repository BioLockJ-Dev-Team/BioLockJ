#!/bin/bash
##########################################################################
##                                                                      ##
##  Script requires valid BioLockJ Config file passed as a parameter.   ##
##  Script requires valid BioLockJ pipeline root directory: $BLJ_PROJ.  ##
##                                                                      ##
##  Pass optional param "-r" as 1st param to restart failed pipeline    ##
##                                                                      ##
##  Pass admin email password as 1st param to encode and store in the   ##
##  BioLockJ Config file (1st param) instead of running a pipeline      ##
##                                                                      ##
##########################################################################

function valid_dir {
	if [ ${#1} -gt 0 ] && [ -d "$1" ]; then  
		echo "Y" 
	else 
		echo "N"
	fi
}


function valid_file {
	if [ ${#1} -gt 0 ] && [ -f "$1" ]; then  
		echo "Y" 
	else 
		echo "N"
	fi
}

SPACER="============================================================"
GAP="    "
# If the jar & scripts is deployed outside of the standard $BLJ directory, $DIR can be used to set $BLJ_JAR instead.
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
BLJ_JAR=$DIR/BioLockJ.jar

if [ "$(valid_file $BLJ_JAR)" == "N" ]; then
    echo "$GAP Jar not found: $BLJ_JAR"
    exit 1
fi

# Create pipelines directory if on 1st run
# Create $BLJ_PROJ directory if parent directory exists
if [ "$(valid_dir $BLJ_PROJ)" == "N" ]; then
    projDir="$(dirname $BLJ_PROJ)"
    parentDir="$(dirname $projDir)"
    topDir="$(dirname $parentDir)"
    [ "$(valid_dir $topDir)" == "Y" ] && [ "$(valid_dir $parentDir)" == "N" ] && mkdir $parentDir
	[ "$(valid_dir $parentDir)" == "Y" ] && mkdir $BLJ_PROJ
	[ "$(valid_dir $parentDir)" == "N" ] && echo "Quit test~ Unable to make directory: $BLJ_PROJ" && exit 1
fi

if [ "$#" -eq 0 ]; then
        echo "$GAP CANCEL EXECUTION - Must pass BioLockJ config file as parameter" 
elif [ "$#" -eq 1 ]; then
    if [ "$1" == "-h" ] || [ "$1" == "--help" ]; then   
        echo "BioLockJ v1.0 - UNCC Fodor Lab July 2018"
        echo "usage: biolockj [-hr] [-p password] [<file>]"
        echo "Run BioLockJ using the Config: <file>"
        echo ""
        echo "-b --basedir                  Pipeline parent directory "
        echo "-c --config                   BioLockJ Config file"
        echo "-h --help                     Show this help menu"
        echo "-p --password new_password    Encrypt new_password and save it to BioLockJ Config property mail.encryptedPassword"
        echo "-r --restart                  Restart existing pipeline "
        exit 0
    fi
    
    echo "$GAP $SPACER"
	echo "$GAP BioLockJ JAR: $BLJ_JAR"
    echo "$GAP BioLockJ Config File:  $1"
    
    if [ "$(valid_file $1)" == "N" ]; then
        echo "$GAP $1 not found!"
        echo "$GAP Exit Program"
        echo "$GAP $SPACER" 
        exit 1
    fi
	nohup java -jar $BLJ_JAR -b $BLJ_PROJ -c $1 >/dev/null 2>&1 &
    exitCode=$?
    if [ "$exitCode" != "0" ]; then
        echo "$GAP ERROR - Unable to execute:  $BLJ_JAR"
        exit 1
    else
        echo "$GAP BioLockJ started successfully!"
    fi    
elif [ "$#" -eq 2 ]; then

    echo "$GAP $SPACER"
	echo "$GAP BioLockJ JAR: $BLJ_JAR"
	 if [ "$(valid_file $2)" == "N" ]; then
        echo "$GAP $2 not found!"
        echo "$GAP Exit Program"
        echo "$GAP $SPACER" 
        exit 1
    fi

	if [ "$1" == "-r" ]; then 
    		echo "$GAP RESTART config:   $2"
    else
        echo "$GAP INVALID command switch:   $1"
        echo "$GAP Exit Program"
        echo "$GAP $SPACER" 
        exit 1
	fi

    nohup java -jar $BLJ_JAR $1 -b $BLJ_PROJ -c $2 >/dev/null 2>&1  &
    exitCode=$?
    if [ "$exitCode" != "0" ]; then
        echo "$GAP ERROR - Unable to execute $BLJ_JAR"
        exit 1
    else
        echo "$GAP BioLockJ started successfully!"
    fi  
elif [ "$#" -eq 3 ]; then
	echo "$GAP $SPACER"
	echo "$GAP BioLockJ JAR: $BLJ_JAR"
	if [ "$1" == "-p" ] || [ "$1" == "--password" ]; then    
    		echo "$GAP Encrypting email password and saving to Config property mail.encryptedPassword"
    		nohup java -jar $BLJ_JAR $1 $2 -b $BLJ_PROJ -c $3 >/dev/null 2>&1 &
        exitCode=$?
    else
    		echo "Invalid parameters!"
    		exit 1
    fi 
    if [ "$exitCode" != "0" ]; then
        echo "$GAP ERROR - Unable to execute:  $BLJ_JAR"
        exit 1
    else
        echo "$GAP BioLockJ started successfully!"
    fi    
elif [ "$#" -gt 3 ]; then
	echo "$GAP $SPACER"
	echo "$GAP BioLockJ JAR: $BLJ_JAR"
    echo "$GAP CANCEL EXECUTION - Too many script parameters!  BioLockJ accepts a maximum of 3 parameters"
    exit 1
fi
echo "$GAP $SPACER"
