#!/bin/bash
##########################################################################
##                                                                      ##
##  Script to launch BioLockJ jar file localy                           ##
##  See biolockj --help.
##                                                                      ##
##########################################################################

main(){
	
	[ ${#BIOLOCKJ_TEST_MODE} -gt 0 ] && printf "\n ---------> Execute CMD [  launch_java $(echo ${@})  ]\n"
	
	take_standard_biolockj_args "$@"
	assign_main_arg
	
	check_env_vars
	check_basic_args
	ifArgUsed $RESTART_ARG && clean_for_restart

	CMD=$(assemble_java_cmd)
	ifArgUsed $FG_ARG && echo -e "Starting BioLockJ:  $CMD"  #<-- for the user to see cmd
	
	before_java_start
	continue_after_command $CMD          #<-- for the developer and test suite to see cmd
	after_java_start
}

. ${BLJ_SCRIPT}/blj_functions
. ${BLJ_SCRIPT}/blj_user_arg_lib

# Make sure required variables exist and are valid
check_env_vars(){
	pls_use_install="\nThe install script packaged with BioLockJ sets this value. You may need to start a new terminal window.\n"
	[ ${#BLJ_PROJ} -eq 0 ] && exit_with_message "Error [ launch_java ]: Required env variable BLJ_PROJ is not defined. $pls_use_install"
	[ ! -d "${BLJ_PROJ}" ] && exit_with_message "Error [ launch_java ]: Required env variable BLJ_PROJ [\"${BLJ_PROJ}\"] must be a directory on the filesystem. $pls_use_install"
	[ ${#BLJ} -eq 0 ] && exit_with_message "Error [ launch_java ]: Required env variable BLJ is not defined. $pls_use_install"
	[ ! -d "${BLJ}" ] && exit_with_message "Error [ launch_java ]: Required env variable BLJ [\"${BLJ}\"] must be a directory on the filesystem. $pls_use_install"
	BLJ_JAR=${BLJ}/dist/BioLockJ.jar
	[ ! -f "${BLJ_JAR}" ] && exit_script "Error [ launch_java ]: BioLockJ Jar file \"${BLJ_JAR}\" not found."
}

check_basic_args(){
	if ifArgUsed $RESTART_ARG ; then
		[ ! -d $restartDir ] && exit_with_message "Error [ launch_java ]: $restartDir is not a directory on the filesystem."
		ifArgUsed $CONFIG_ARG && [ ! -f "${configFile}" ] && exit_with_message "Error [ launch_java ]: Config file [ $configFile ] not found on filesystem."
	else
		[ ! -f "${configFile}" ] && exit_with_message "Error [ launch_java ]: Config file [ $configFile ] not found on filesystem."
	fi
}

clean_for_restart(){
	if pipeline_has_status_flag ; then
		${BLJ}/script/blj_reset $restartDir
	fi
}

pipeline_has_status_flag(){
	ifDefined $restartDir && [ -f $restartDir/biolockjStarted ] || [ -f $restartDir/biolockjFailed ] || [ -f $restartDir/biolockjComplete ]
}

assemble_java_cmd(){
	if ifArgUsed $FG_ARG ; then
		directStdOut=""
		useNohup=""
	else
		directStdOut=">/dev/null 2>&1 &"
		useNohup="nohup"
	fi
	
	echo "${useNohup} $(java_cmd_core) $(assemble_args) $directStdOut"
}

java_cmd_core(){
	if ifArgUsed $EXT_MODS_ARG ; then
		echo "java -cp ${BLJ_JAR}:$(get_arg_value $EXT_MODS_ARG)/* biolockj.BioLockJ"
	else
		echo "java -jar ${BLJ_JAR}"
	fi
}

# Put together the arguments to pass to the java program
assemble_args(){
	args="-b ${BLJ_PROJ} -u ${HOME}"
	ifArgUsed $PASSWORD_ARG && args="${args} -p $(get_arg_value $PASSWORD_ARG)" 
	ifArgUsed $RESTART_ARG && args="${args} -r ${restartDir}"
	[ ${#configFile} -gt 0 ] && args="${args} -c ${configFile}"
	echo $args
}

before_java_start(){
	initDir="$(most_recent_pipeline)"
	pipeDir="${initDir}"
	initJava=$(ps | grep -c java)
	numJava=${initJava}
}

after_java_start(){
	confirm_java_started
	print_info
}

confirm_java_started(){
	[ $? != 0 ] && exit_with_message "Error [ biolockj ]:  Unable to run ${BLJ_JAR}"
	printf "Initializing BioLockJ"
	i=0
	maxtime=15
	while [ $i -lt $maxtime ] || ifArgUsed $WAIT_ARG \
		&& [ "${initDir}" == "${pipeDir}" ] && [ ${initJava} -eq ${numJava} ] \
		&& ! pipeline_has_status_flag ; do
		printf "."
		i=$((i+1))
		pipeDir="$(most_recent_pipeline)"
		numJava=$(ps | grep -c java)
		if [ $i -eq 10 ]; then
			printf "waiting for java to start"
		fi
		if [ $i -eq $maxtime ]; then
			if ifArgUsed $WAIT_ARG ; then
				echo "The normal timeout has been disabled."
			else
				echo "Reached max wait time: $maxtime seconds."
			fi
		fi
		sleep 1
	done
	sleep 1
	echo "."
	pipeDir="$(most_recent_pipeline)" # could lag slightly after java start
}

print_info(){
	if ifArgUsed $RESTART_ARG && [ ${numJava} -gt ${initJava} ]; then 
		echo "Restarting pipeline:  ${pipeDir}"
		print_action_options
		print_status
	elif [ "${initDir}" != "${pipeDir}" ] ; then 
		echo "Building pipeline:  ${pipeDir}"
		print_action_options
		print_status
	elif ! ifArgUsed $RESTART_ARG && ! ifArgUsed $GUI_ARG; then
		echo "Pipeline may have failed to launch - check $BLJ_PROJ for new pipeline"
		print_action_options
	fi
}


print_action_options(){
	echo "blj_go       -> Move to pipeline output directory"
	echo "blj_log      -> Tail pipeline log (accepts tail runtime parameters)"
	echo "blj_summary  -> View module execution summary"
}

print_status(){
	printf "Fetching pipeline status "
	i=0
	maxtime=5
	while [ $i -lt $maxtime ] || ifArgUsed $WAIT_ARG ; do
		i=$((i+1))
		if [ -f ${pipeDir}/biolockjFailed ]; then 
			echo ""; echo ""
			echo "BioLockJ has stopped."
			echo ""
			cat ${pipeDir}/biolockjFailed
			echo ""; echo ""
			exit
		elif [ -f ${pipeDir}/biolockjComplete ]; then
			echo ""; echo ""
			echo "Pipeline is complete."
			exit
		elif ! ifArgUsed $RESTART_ARG && [ -f ${pipeDir}/00_*/biolockjStarted ] || [ -f ${pipeDir}/00_*/biolockjComplete ]; then
			echo ""; echo ""
			echo "Pipeline is running."
			exit
#		# TODO need better indicator for restart case
#		elif ifArgUsed $RESTART_ARG && [ $i -gt 3 ] && [ -f ${pipeDir}/*/biolockjStarted ]; then 
#			completeMods=(${pipeDir}/*/biolockjComplete)
#			numComplete=${#completeMods[@]}
#			echo ""; echo ""
#			echo "Pipeline is running, with $numComplete modules completed."
#			exit
		elif [ $i -eq $maxtime ]; then
			if ifArgUsed $WAIT_ARG ; then
				printf "(no timeout) "
			else
				printf "Reached max wait time: $maxtime seconds. "
			fi
		elif [ $i -gt 1 ]; then
			printf "."
		fi
		sleep 1
	done
	echo ""
	echo "Could not verify that the pipeline is running."
	echo "It may still be checking dependencies."
}

main $@
