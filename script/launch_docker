#!/bin/bash
###############################################################################
##  Script launches BioLockJ via Docker + creates $DOCKER_CLONE_SCRIPT       ##
##  Bash env must include pipeline base directory: ${BLJ_PROJ}               ##
##                                                                           ##
##  Required Parameters (If gui arg passed, no other args required)          ##
##  Config file path:          <file_path>                                   ##
##  OR                                                                       ##
##  Restart dir                                                              ##
##                                                                           ##
##  Optional Parameters:                                                     ##
##  Aws flag:                  aws                                           ##
##  Use local BLJ flag:        blj                                           ##
##  Run GUI flag:              gui                                           ##
##  New email password:        pass    <new_password>                        ##
##  Restart flag:              restart <dir_path>                            ##
###############################################################################

main(){
	[ ${#BIOLOCKJ_TEST_MODE} -gt 0 ] && printf "\n ---------> Execute CMD [  launch_docker $(echo ${@})  ]\n"
	
	take_standard_biolockj_args "$@"
	
	assign_main_arg
	
	[ ${#BIOLOCKJ_TEST_MODE} -gt 0 ] && echo "args used: ${argsFromUser[@]}" && echo "configFile = $configFile" && echo "restartDir = $restartDir"
	
	scan_script_and_env_args
	! ifArgUsed $GUI_ARG && ! in_docker_env && verify_inputs
	
	restartDir_has_status_flag && ${BLJ}/script/blj_reset $restartDir

	GUI_PORT=8080
	volumns=$(get_volumes) || exit_with_message "${volumns[@]}"
	CMD="docker run $(docker_args) -e \"BLJ_OPTIONS=$(blj_options)\" $volumns $(args_for_gui) $(get_docker_img) $(cmd_for_gui)"
		
	! in_docker_env && build_clone_script "${CMD}"
	
	before_docker_start
	
	if ifArgUsed $FG_ARG ; then
		echo " ---------> Docker CMD [  $CMD  ]"
		continue_after_command $CMD
	else
		containerId=$(continue_after_command $CMD)
		echo "Docker container id: $containerId"
		# We capture the output of continue_after_command, so we have to pass along the test scenario
		[ ${#BIOLOCKJ_TEST_MODE} -gt 0 ] && echo $containerId && exit
		confirm_biolockj_start
		print_info
	fi
	
	ifArgUsed $GUI_ARG && startBrowser # if the gui has its own docker container, this CMD would be defined there
}

. ${BLJ}/script/blj_user_arg_lib
. ${BLJ}/script/docker_config

# Read script args and bash env vars
# Param 1 - Array of launch_docker script args
scan_script_and_env_args() {
	ifArgUsed $PRECHECK && ifArgUsed $RESTART_ARG && exit_with_message "Error [ launch_docker ]: \"$PRECHECK\" can only be used with new pipelines; cannot be used in conjunction with \"$RESTART_ARG\". "
	ifArgUsed $UNUSED_PROPS_ARG && ifArgUsed $RESTART_ARG && exit_with_message "Error [ launch_docker ]: \"$UNUSED_PROPS_ARG\" can only be used with new pipelines; cannot be used in conjunction with \"$RESTART_ARG\". "
	ifArgUsed $PASSWORD_ARG && newPass=$(get_arg_value $PASSWORD_ARG)
	ifArgUsed $EXT_MODS_ARG && extMods=$(get_arg_value $EXT_MODS_ARG)
	ifArgUsed $GUI_ARG && echo "Starting BioLockJ GUI..."
}

# Verify paths are valid
# Paths provided by config file are verified as they are collected, not here.
verify_inputs() {
	verifyDir $BLJ_PROJ
	ifDefined $restartDir && verifyRestartDir
	ifDefined $configFile && verifyConfig
}

# Verify host directory exists, if launch_docker is not deployed inside a Docker container
# Param 1 - System path
verifyRestartDir() {
 	[ ! -d $restartDir ] && restartDir=$(java -cp $BLJ/dist/BioLockJ.jar biolockj.util.DockerUtil $restartDir target)
 	[ ! -d $restartDir ] && exit_script "Error [ launch_docker ]: The restart dir \"$restartDir\" is not accessible."
}

# Verify host file exists, if launch_docker is not deployed inside a Docker container
# Param 1 - System path
verifyConfig() {
	[ ! -f $configFile ] && configFile=$(java -cp $BLJ/dist/BioLockJ.jar biolockj.util.DockerUtil $configFile target)
 	[ ! -f $configFile ] && exit_script "Error [ launch_docker ]: The properties file \"$configFile\" is not accessible."
}

docker_args(){
	local dockArgs=$(flags_for_run)
	if ifArgUsed $ENV_ARG ; then
		envVars=$(get_arg_value $ENV_ARG)
		vars=${envVars//,/" "}
		for v in ${vars[@]}; do
			dockArgs="${dockArgs} -e $v"
		done
	fi
	echo $dockArgs
}
flags_for_run(){
	if ifArgUsed $FG_ARG ; then
		echo "--rm"
	else
		echo "--rm -d"
	fi
}

# Populate docker run env variable $BLJ_OPTIONS 
# Always include vars to map Host paths: Config, $BLJ_PROJ
# In AWS mode, add a indicator, otherwise include the Host path for pipeline input. 
# These paths are used by biolockj_controller to map Docker volumes for java_module containers
blj_options() {
    if in_docker_env ; then
        options="-projectDir $(java -cp $BLJ/dist/BioLockJ.jar biolockj.util.DockerUtil ${BLJ_PROJ})"
        ifDefined $restartDir && options="${options} -restartDir $(java -cp $BLJ/dist/BioLockJ.jar biolockj.util.DockerUtil $(to_abs_path $restartDir))"
	else
	    options="-projectDir ${BLJ_PROJ}"
	    ifDefined $restartDir && options="${options} -restartDir $(to_abs_path $restartDir)"
	fi
	ifArgUsed $PASSWORD_ARG && options="${options} -password $newPass"
	ifArgUsed $AWS_ARG && options="${options} -aws"
	ifArgUsed $PRECHECK && options="${options} -precheck"
	ifArgUsed $UNUSED_PROPS_ARG && ifArgUsed $PRECHECK && options="${options} -unusedProps"
	ifArgUsed $UNUSED_PROPS_ARG && ! ifArgUsed $PRECHECK && options="${options} -precheck -unusedProps"
	if in_docker_env ; then
	    ifDefined $configFile && options="${options} -config $(java -cp $BLJ/dist/BioLockJ.jar biolockj.util.DockerUtil $(to_abs_path ${configFile}) )"
	else
	    ifDefined $configFile && options="${options} -config $(to_abs_path ${configFile})"
	fi
	echo "${options}"
}

# Get mapped  Docker volumes
# TODO - this method assumes that $configFile path is given in terms of the host machine
# TODO use mount instead of volumes
get_volumes() {
	vols="-v ${DOCK_SOCK}:${DOCK_SOCK}"
	ifArgUsed $BLJ_ARG && vols="${vols} --mount type=bind,source=${BLJ},target=/app/biolockj"
	ifArgUsed $EXT_MODS_ARG && vols="${vols} --mount type=bind,source=${extMods},target=/app/external_modules"
	if ifArgUsed $AWS_ARG ; then
		#TODO - replace this; docker mounts will done the same way on aws or local machine
		vols="${vols} -v ${EFS}:${EFS}:delegated" 
	else
	    if in_docker_env ; then
	       local HOST_BLJ_PROJ=$(java -cp $BLJ/dist/BioLockJ.jar biolockj.util.DockerUtil ${BLJ_PROJ})
	       vols="${vols} --mount type=bind,source=${HOST_BLJ_PROJ},target=${EFS_PROJ}"
	    else
		   vols="${vols} --mount type=bind,source=${BLJ_PROJ},target=${EFS_PROJ}"
		fi
		if ifArgUsed $GUI_ARG; then 
			# TODO - use aws cli in container, don't map in user's
			vols="${vols} -v ${BLJ}/resources/config/gui:${BLJ_CONFIG}"
			[ -f "$(which aws)" ] && [ -d "$(dirname $(which aws))" ] && vols="${vols} -v $(dirname $(which aws)):${APP_BIN}"
		else 
			local i=1
			readableConfig=$(get_readable_config)
			configuredDirs=$(${BLJ}/script/biolockj-api listMounts --config $readableConfig)
			[ ! $? -eq 0 ] && echo "${configuredDirs[@]}" && exit 1 #this is called in subshell, failures have to get passed up the chain
			for dir in ${configuredDirs[@]}; do
				vols="${vols} --mount type=bind,source=${dir},target=${EFS}/vol_${i}" 
				i=$(( i + 1 ))
			done
		fi
	fi
	echo "${vols}"
}

get_readable_config(){
	if ifArgUsed $RESTART_ARG && ! ifDefined $configFile ; then
		echo $(ls ${restartDir}/MASTER*properties )
	elif ifDefined $configFile; then
	    verifyConfig 
		echo $configFile
	else
		exit_with_message "Could not get a readable config file."
	fi
}

args_for_gui(){
	ifArgUsed $GUI_ARG && echo "-p ${GUI_PORT}:3000 --expose ${GUI_PORT} -w /app/biolockj/web_app"
}

get_docker_img() {
	local VER=$(cat ${BLJ}/.version)
	local TAG=${VER//-*}
	if [ ${#TAG} -eq 0 ]; then
		local TAG=latest
	fi
	echo "${DOCKER_ID}/biolockj_controller:${TAG}"
}

cmd_for_gui(){
	ifArgUsed $GUI_ARG && echo "npm start"
}

# Build a script that can be used to launch an interactive clone of the docker container
# Param 1 - Full Docker run command
build_clone_script() {
	cmd="$@"
	
	img=$(get_docker_img)
	cmd=${cmd//$img*/-it $img /bin/bash} # be interactive
	cmd=${cmd//"--rm -d "/"--rm "} # run in the foreground
	$(in_docker_env) && DOCKER_CLONE_SCRIPT="${BLJ_HOST_HOME}/$(basename $DOCKER_CLONE_SCRIPT)"
	
	echo "#!/bin/bash"                       > "${DOCKER_CLONE_SCRIPT}"
	echo "# This script launches a clone of the last biolockj_controller (same env vars + volumes)" >> "${DOCKER_CLONE_SCRIPT}"
	echo "${cmd}"                           >> "${DOCKER_CLONE_SCRIPT}"
	
	chmod 777 "${DOCKER_CLONE_SCRIPT}"
	echo "Created \"${DOCKER_CLONE_SCRIPT}\" "
	echo "This script will launch another instance of this docker image," 
	echo "with the same env vars + volumes, but in interactive mode."
	echo ""
}

# Start the local browswer
startBrowser() {
	sleep 2 # See also: https://stackoverflow.com/questions/3124556/clean-way-to-launch-the-web-browser-from-shell-script#3124750
	if which xdg-open > /dev/null; then
		xdg-open http://localhost:${GUI_PORT}
	elif which gnome-open > /dev/null; then
		gnome-open http://localhost:${GUI_PORT}
	elif which python > /dev/null; then
		python -mwebbrowser http://localhost:${GUI_PORT}
	else
		echo "Web browser not found on localhost!"
	fi
}

before_docker_start(){
	initDir="$(most_recent_pipeline)"
	pipeDir="${initDir}"
	verifiedDockerLaunch="false"
}

confirm_biolockj_start(){
	printf "Initializing BioLockJ"
	i=0
	maxtime=25
	in_docker_env && maxtime=120 #launch from docker can be sluggish
	while [ $i -lt $maxtime ] || ifArgUsed $WAIT_ARG \
		&& [ "${initDir}" == "${pipeDir}" ] \
		&& is_container_running \
		&& ! restartDir_has_status_flag ; do
		printf "."
		i=$((i+1))
		pipeDir="$(most_recent_pipeline)"
		numJava=$(ps | grep -c java)
		if [ $i -eq 10 ]; then
			printf "waiting for java to start"
		fi
		if [ $i -eq $maxtime ]; then
			if ifArgUsed $WAIT_ARG ; then
				echo "The normal timeout has been disabled."
			else
				echo "Reached max wait time: $maxtime seconds."
			fi
		fi
		sleep 1
	done
	sleep 1
	echo "."
	pipeDir="$(most_recent_pipeline)" # could lag slightly after program start
}

is_container_running(){
	numWords=$(echo $containerId | wc -w )
	if [ $numWords -eq 1 ]; then
		containerRunning=$(docker inspect -f '{{.State.Running}}' $containerId 2>/dev/null)
	else
		echo $containerId
		exit_with_message "Did not retreive a valid container id from the docker program."
	fi
	if [ ${#containerRunning} -eq 0 ] || [ $(echo $containerRunning | wc -w ) -gt 1 ]; then
		containerRunning="false"  
	fi
	[ ${containerRunning} == "true" ] && verifiedDockerLaunch="true"
	[ ${containerRunning} == "true" ] 
}

print_info(){
    showPipeDir=$(java -cp $BLJ/dist/BioLockJ.jar biolockj.util.DockerUtil ${pipeDir})
	if ! is_container_running && ! restartDir_has_status_flag && [ "${initDir}" == "${pipeDir}" ] ; then
		if [ $verifiedDockerLaunch == "true" ]; then
			echo "Docker started; but the pipeline did not."
		else
			echo "Failed to start docker container."
		fi
	elif restartDir_has_status_flag; then 
		echo "Restarting pipeline:  ${showPipeDir}"
		print_action_options
		print_pipeline_status_and_exit ${pipeDir} 600
	elif [ "${initDir}" != "${pipeDir}" ] ; then 
		echo "Building pipeline:  ${showPipeDir}"
		print_action_options
		print_pipeline_status_and_exit ${pipeDir} 600
	else
		echo "Pipeline may have failed to launch - check $BLJ_PROJ for new pipeline"
		! in_docker_env && print_action_options
	fi
}

main $@