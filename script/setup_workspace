#!/bin/bash

###################################################################
##                                                               ##
##  This script is designed for users who want to use the        ##
##  "pure docker" approach.  It sets ups a collections of        ##
##  sub-dirs in the "workspace" directory, and copies some       ## 
##  files into that space from the container.                    ##
##                                                               ##
###################################################################


# maybe verify that workspace is mapped ?

main(){

	SOURCE=plans
	if [ -d /workspace/$SOURCE ]; then
		echo "Found $SOURCE folder."
	else
		echo "Creating $SOURCE folder..."
		mkdir /workspace/$SOURCE
	fi
	HOST_SOURCE=$(java -cp $BLJ/dist/BioLockJ.jar biolockj.util.DockerUtil /workspace/$SOURCE)
	echo "A project plan includes a 'properties' file and any project-specific files it references."
	echo "Store plans under this folder:"
	echo '    '"$HOST_SOURCE"
	echo ""
	
	
	PIPELINES=pipelines
	if [ -d /workspace/$PIPELINES ]; then
		echo "Found $PIPELINES folder."
	else
		echo "Creating $PIPELINES folder..."
		cp -r $BLJ/$PIPELINES /workspace/.
	fi
	HOST_BLJ_PROJ=$(java -cp $BLJ/dist/BioLockJ.jar biolockj.util.DockerUtil /workspace/$PIPELINES)
	echo "BioLockJ will create pipelines under this folder:"
	echo '    '"$HOST_BLJ_PROJ"
	echo ""


    TEMPLATE=templates
    [ ! -d /workspace/$TEMPLATE ] && mkdir /workspace/$TEMPLATE
    echo "Adding example project plans to help you get started...see /workspace/$TEMPLATE"
    echo "The /workspace/$TEMPLATE folder is updated anytime you run the setup_workspace command."
	cp -r $BLJ/templates/* /workspace/$TEMPLATE/.
	echo ""
	
	LOCAL_PROPS=/workspace/local.properties
	HOST_LOCAL_PROPS=$(java -cp $BLJ/dist/BioLockJ.jar biolockj.util.DockerUtil $LOCAL_PROPS)
	[ ! -f $LOCAL_PROPS ] && echo "Creating $HOST_LOCAL_PROPS file." && cp /workspace/$TEMPLATE/COPY_ME_local.properties $LOCAL_PROPS
	echo "Property files can reference this file using the full path:"
	echo '    pipeline.defaultProps='"$HOST_LOCAL_PROPS"
	echo ""

		
	# ARCHIVE=archive
	# if [ -d /workspace/$ARCHIVE ]; then
	# 	echo "Found $ARCHIVE folder."
	# else
	# 	echo "Creating $ARCHIVE folder..."
	# 	mkdir /workspace/$ARCHIVE	
	# fi

	
	EXTRA_MODS=extra_modules
	if [ -d /workspace/$EXTRA_MODS ]; then
		echo "Found $EXTRA_MODS folder."
	else
		echo "Creating $EXTRA_MODS folder..."
		mkdir /workspace/$EXTRA_MODS
	fi
	HOST_EXT_MODS=$(java -cp $BLJ/dist/BioLockJ.jar biolockj.util.DockerUtil /workspace/$EXTRA_MODS)
	echo "To use third-party modules, add the module jar file to this folder:"
	echo '    '"$HOST_EXT_MODS"
	echo ""

	
	SCRIPT=script
	[ ! -d /workspace/$SCRIPT ] && mkdir /workspace/$SCRIPT


	HOST_WORKSPACE=$(java -cp $BLJ/dist/BioLockJ.jar biolockj.util.DockerUtil /workspace)
	VER=$(cat ${BLJ}/.version)
	TAG=${VER//-*}
	if [ ${#TAG} -eq 0 ]; then
		local TAG=latest
	fi


	ifDefined $HOST_OS_SCRIPT && [ $HOST_OS_SCRIPT == bash ] && build_bash_wrapper
	! ifDefined $HOST_OS_SCRIPT && build_bash_wrapper

	ifDefined $HOST_OS_SCRIPT && [ $HOST_OS_SCRIPT == ps1 ] && build_power_shell_wrapper
	! ifDefined $HOST_OS_SCRIPT && build_power_shell_wrapper

	echo ""
	echo "Your workspace is all set up! Step 1 of 3 is done!"
	echo "See user guide for more details about the pure-docker approach."
	echo ""

}

. ${BLJ}/script/blj_functions

build_bash_wrapper(){
	BASH_LAUNCHER=/workspace/$SCRIPT/docker-biolockj
	if [ -f $BASH_LAUNCHER ] ; then
		echo "Updating $BASH_LAUNCHER ..."
	else
		echo "Building $BASH_LAUNCHER ..."
	fi
	echo "#!/bin/bash" > $BASH_LAUNCHER
	echo "" >> $BASH_LAUNCHER
	echo 'docker run --rm \' >> $BASH_LAUNCHER
	echo '   -v /var/run/docker.sock:/var/run/docker.sock \' >> $BASH_LAUNCHER
	echo '   -v '"$HOST_WORKSPACE"':/workspace \'  >> $BASH_LAUNCHER
	echo '   biolockjdevteam/biolockj_controller:'"$TAG"' \' >> $BASH_LAUNCHER
	echo '   biolockj --docker \' >> $BASH_LAUNCHER
	echo '   --external-modules '"$HOST_EXT_MODS"' \' >> $BASH_LAUNCHER
	echo '   --blj_proj '"$HOST_BLJ_PROJ"' \' >> $BASH_LAUNCHER
	echo '${@}' >> $BASH_LAUNCHER
	echo "" >> $BASH_LAUNCHER
	chmod a+rwx $BASH_LAUNCHER
	
	BASH_API_LAUNCHER=${BASH_LAUNCHER/biolockj/biolockj-api}
	echo "#!/bin/bash" > $BASH_API_LAUNCHER
	echo "" >> $BASH_API_LAUNCHER
	echo 'docker run --rm \' >> $BASH_API_LAUNCHER
	echo '   -v /var/run/docker.sock:/var/run/docker.sock \' >> $BASH_API_LAUNCHER
	echo '   -v '"$HOST_WORKSPACE"':/workspace \'  >> $BASH_API_LAUNCHER
	echo '   biolockjdevteam/biolockj_controller:'"$TAG"' \' >> $BASH_API_LAUNCHER
	echo '   biolockj-api \' >> $BASH_API_LAUNCHER
	echo '${@}' >> $BASH_API_LAUNCHER
	echo "" >> $BASH_API_LAUNCHER
	chmod a+rwx $BASH_API_LAUNCHER
	
	local host_launcher=$(java -cp $BLJ/dist/BioLockJ.jar biolockj.util.DockerUtil $BASH_LAUNCHER)
	echo "Try printing the help menu:"
	echo "$host_launcher --help" 
	echo ""
	
	echo "Recommended setup commands for bash systems:"
	echo "echo 'export PATH=$(dirname $host_launcher)"':$PATH'"' >"'> ~/.bash_profile'
	echo '. ~/.bash_profile'
	echo ""
}

build_power_shell_wrapper(){
	POWER_SHELL_LAUNCHER=/workspace/$SCRIPT/docker-biolockj.ps1
	if [ -f $POWER_SHELL_LAUNCHER ] ; then
		echo "Updating $POWER_SHELL_LAUNCHER ..."
	else
		echo "Building $POWER_SHELL_LAUNCHER ..."
	fi
	#echo "#!/bin/bash" > $POWER_SHELL_LAUNCHER
	echo "" > $POWER_SHELL_LAUNCHER
	echo 'docker run --rm `' >> $POWER_SHELL_LAUNCHER
	echo '   -v /var/run/docker.sock:/var/run/docker.sock `' >> $POWER_SHELL_LAUNCHER
	echo '   -v '"$HOST_WORKSPACE"':/workspace `' >> $POWER_SHELL_LAUNCHER
	echo '   biolockjdevteam/biolockj_controller:'"$TAG"' `' >> $POWER_SHELL_LAUNCHER
	echo '   biolockj --docker `' >> $POWER_SHELL_LAUNCHER
	echo '   --external-modules '"$HOST_EXT_MODS"' `' >> $POWER_SHELL_LAUNCHER
	echo '   --blj_proj '"$HOST_BLJ_PROJ"' `' >> $POWER_SHELL_LAUNCHER
	echo '$args' >> $POWER_SHELL_LAUNCHER
	echo "" >> $POWER_SHELL_LAUNCHER
	chmod a+rwx $POWER_SHELL_LAUNCHER
	
	PS_API_LAUNCHER=${POWER_SHELL_LAUNCHER/biolockj/biolockj-api}
	echo "#!/bin/bash" > $PS_API_LAUNCHER
	echo "" >> $PS_API_LAUNCHER
	echo 'docker run --rm `' >> $PS_API_LAUNCHER
	echo '   -v /var/run/docker.sock:/var/run/docker.sock `' >> $PS_API_LAUNCHER
	echo '   -v '"$HOST_WORKSPACE"':/workspace `'  >> $PS_API_LAUNCHER
	echo '   biolockjdevteam/biolockj_controller:'"$TAG"' `' >> $PS_API_LAUNCHER
	echo '   biolockj-api `' >> $PS_API_LAUNCHER
	echo '$args' >> $PS_API_LAUNCHER
	echo "" >> $PS_API_LAUNCHER
	chmod a+rwx $PS_API_LAUNCHER
	
	local host_launcher=$(java -cp $BLJ/dist/BioLockJ.jar biolockj.util.DockerUtil $POWER_SHELL_LAUNCHER)
	echo "Try printing the help menu:"
	echo "$host_launcher --help" 
	echo ""
		
	echo 'Recommended setup commands for powershell:'
	echo 'Set-ExecutionPolicy RemoteSigned'
	echo 'Set-Alias -Name docker-biolockj -Value $PWD\workspace\script\docker-biolockj.ps1'
	echo 'Set-Alias -Name docker-biolockj-api -Value $PWD\workspace\script\docker-biolockj-api.ps1'
	#echo 'Add-Content $profile "Set-Alias -Name docker-biolockj -Value $PWD\workspace\source\docker-biolockj.ps1"'
	#echo 'Add-Content $profile "Set-Alias -Name docker-biolockj-api -Value $PWD\workspace\source\docker-biolockj-api.ps1"'
	echo ""
	
}

main $@
