#!/bin/bash
##########################################################################
##                                                                      ##
##  Script requires 1+ of the listed arguments parameter.               ##
##  Script requires  BioLockJ pipeline root directory: $BLJ_PROJ.       ##
##                                                                      ##
##  Pass optional param "-r" as 1st param to restart failed pipeline    ##
##                                                                      ##
##  Pass admin email password as 1st param to encode and store in the   ##
##  BioLockJ Config file (2nd param) instead of running a pipeline      ##
##                                                                      ##
##########################################################################

. ${BLJ}/script/blj_functions
. ${BLJ}/script/blj_user_arg_functions

#. "${AWS_LIB}" #<- should be able to delete this



# Get dockblj scripts formatted named arg params
#docker_args() {
#	args='' && [ ${#gui} -gt 0 ] && args="-gui"
#	[ ${#config} -gt 0 ] && args="c=${config}" && [ ${#newPass} -gt 0 ] && args="${args} p=${newPass}"
#	[ ${#restart} -gt 0 ] && args="${args} r=${restart}"
#	[ ${#blj} -gt 0 ] && args="${args} blj"
#	[ ${#blj_sup} -gt 0 ] && args="${args} blj_sup"
#	echo "${args}"
#}


# <--------------------- delete starting here

# Convert input parameters to array with values "name=value"
#get_params() {
#	count=0 && i=0 && conf='' && restartDir='' && args=( "$@" )
#    for arg in ${args[@]}; do
#    	count=$((count+1))
#    	[ "${arg//-}" == "blj" ] && echo "blj" && continue
#   	 	[ "${arg//-}" == "blj_sup" ] && echo "blj_sup" && continue
#		i=$((i+1)) && [ $((i%2)) -eq 1 ] && name="${arg//-}"
#		[ $((i%2)) -eq 1 ] && ! $(lastArgMustBeConfig $count $numArgs) && $(is_flag_arg $name) && echo "${name:0:1}" && name='' && i=$((i+1)) && continue
#		if [ $((i%2)) -eq 0 ]; then
#			echo "${name}=${arg}" && x="${name}" && name=''
#			[ "${x:0:1}" == "r" ] && restartDir="${arg}"
#			[ "${x:0:1}" == "c" ] && conf="${arg}"
#    	fi
#    done
#     [ ${#name} -gt 0 ] && [ ${#conf} -eq 0 ] && echo "c=${name}"
#}

# Determine if given arg is a flag arg that will not be matched with the next arg
# Param 1 - script arg
#is_flag_arg() {
#	[ $(echo ${1:0:1} | egrep -c 'a|b|d|g') -gt 0 ]
#}

# The last arg must be the config path, if config & restart dir are undefined and we are looking at the last parameter
# Param 1 - Current script input param number
# Param 2 - Total number of script input params
#lastArgMustBeConfig() {
#	[ $1 -eq $2 ] && [ ${#conf} -eq 0 ] && [ ${#restartDir} -eq 0 ]
#}

# Initialize script, read in script arguments
# Param 1 -  All script args ${@}
#read_input_args() {
#	args=$(get_params $@)
#	blj=$(arg_exists $args blj)
#	blj_sup=$(arg_exists $args blj_sup)
#	runAws=$(arg_exists $args a)
#	runGui=$(arg_exists $args g)
#	displayHelp=$(arg_exists $args h)
#	displayVersion=$(arg_exists $args v)
#	runDocker=$(arg_exists $args d)
#	config=$(named_arg $args c)
#	newPass=$(named_arg $args p)
#	restart=$(named_arg $args r)
#	
#	if [ ${#runDocker} -eq 0 ]; then 
#		[ ${#runGui} -gt 0 ] && runDocker="d" && echo "Arg \"gui\" is only applicable in Docker mode --> starting Docker biolockj_controller container"
#		[ ${#blj} -gt 0 ] && echo "Arg \"blj\" is only applicable in Docker mode so will be ignored"
#		[ ${#blj_sup} -gt 0 ] && echo "Arg \"blj_sup\" is only applicable in Docker mode so will be ignored"
#	fi
#}
# <--------------------- delete up to here






# Run biolockj by locally, on AWS, or in Docker mode based on script args
run_biolockj() {
	if [ ${aws} == "true" ]; then
		exit_after_command "launch_aws ${@}"
	elif [ ${gui} == "true" ]; then
		echo "Need to write some code to run the gui. extract from dockblj"
	elif [ ${docker} == "true" ]; then
		exit_after_command "launch_docker ${@}"
	else
		exit_after_command "launch_java ${@}"
	fi
}




# Before anything else, check to see if the user just wants help or version info.
index_of "--help" "$@" || index_of "-h" "$@" && display_help && exit 0
index_of "--version" "$@" || index_of "-v" "$@" && display_version && exit 0

# Make sure there is at least one argument
[ $# -eq 0 ] && exit_with_message "biolockj requires at least one argument."

printf "\n ---------> Execute CMD [  biolockj $(echo ${@})  ]\n"

# take standard biolockj args
init_defaults
split_main_arg_from_options "$@"
[ ${#options[@]} -gt 0 ] && parse_options "${options[@]}"

# store named arg values as bash variables; note that any -'s are removed from the variable name.
for i in $(seq 0 $((${#longArgName[@]} - 1)) ); do
	declare "${longArgName[ $i ]//-/}"=${parameters[ $i ]}
	[ ${#BIOLOCKJ_TEST_MODE} -gt 0 ] && echo "${longArgName[ $i ]//-/} = ${parameters[ $i ]}"
done 

run_biolockj "${@}"


