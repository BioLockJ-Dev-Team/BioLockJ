#!/bin/bash
###################################################################
##                                                               ##
##  This script contains common functions used in                ##
##  BioLockJ scripts to interpret user input.                    ##
##                                                               ##
##  This is used by the biolockj script, and its luanchers,      ##
##  AND by the biolockj_api.                                     ##
##                                                               ##
###################################################################

. ${BLJ}/script/blj_functions

# example: take_standard_biolockj_args "$@"
take_standard_biolockj_args(){
	set_arg_names
	init_defaults
	split_main_arg_from_options "$@"
	[ ${#options[@]} -gt 0 ] && parse_options "${options[@]}"
	[ ${#BIOLOCKJ_TEST_MODE} -gt 0 ] && display_arg_vals
	export_env_vars
}

set_arg_names(){
	GUI_ARG="gui"
	PASSWORD_ARG="password"
	CONFIG_ARG="config-override"
	RESTART_ARG="restart"
	AWS_ARG="aws"
	DOCKER_ARG="docker"
	FG_ARG="foreground"
	EXT_MODS_ARG="external-modules"
	BLJ_ARG="blj"
	PROJ_ARG="blj_proj"
	ENV_ARG="env-var"
	WAIT_ARG="wait-for-start"
	PRECHECK="precheck-only"
}

init_defaults(){
	# Order does not matter for $longArgName or $takeShortArg, but it is easier to read if they match
	# Order MATTERS for $shortArgName and $parameters ---they must match whatever order is in $longArgName.
	longArgName=( $GUI_ARG $CONFIG_ARG $RESTART_ARG $AWS_ARG $DOCKER_ARG $FG_ARG $ENV_ARG $WAIT_ARG $PRECHECK $PASSWORD_ARG $PROJ_ARG $EXT_MODS_ARG $BLJ_ARG )
	takeShortArg=($GUI_ARG $CONFIG_ARG $RESTART_ARG $AWS_ARG $DOCKER_ARG $FG_ARG $ENV_ARG $WAIT_ARG $PRECHECK help version)
	shortArgName=()
	parameters=()
	mustTakeValue=($PASSWORD_ARG $CONFIG_ARG $EXT_MODS_ARG $PROJ_ARG $ENV_ARG)
	canTakeValue=(${mustTakeValue[@]})
	for i in ${!longArgName[@]}; do
		longName=${longArgName[ $i ]}
		if containsElement $longName ${takeShortArg[@]}
			then shortArgName[ $i ]=${longName:0:1}
			else shortArgName[ $i ]=$longName # a place holder
		fi 
		parameters[ $i ]="default"
		i=$((i+1))
	done
	argsFromUser=() # distinguish between the default, and the user supplying "default" as the value
}

# get the last argument, and call it mainArg
# all preceding arguments are options
split_main_arg_from_options(){
	local args=( "$@" )	
	local numArgs=${#args[@]}
	mainArg=${args[$numArgs-1]}
	options=()
	if [ $numArgs -gt 1 ]; then
		for i in $(seq 0 $((${#args[@]} - 2)) ); do
			options[ $i ]=${args[ $i ]}
		done
	fi
	if [ ${mainArg:0:1} == "-" ]; then
		mainArg=""
		local i=${#options[@]}
		options[ $i ]=${args[ $i ]}
	fi
}


# call using: parse_options $options
# assumes that the following variables exist: 
#   order within these three should match: longArgName, shortArgName, parameters
#   order of these does not matter:    mustTakeValue, canTakeValue
parse_options(){
	argName=""
	# iterate over all args except the the last one; that one is handled as "mainArg"
	for arg in "$@" ; do
		# if arg starts with -, we assume its an an argument name
		if [ ${arg:0:1} == "-" ]; then
			[ ${#argName} -gt 0 ] && containsElement $argName ${mustTakeValue[@]} && exit_with_message "error: the value of argument [ $argName ] should not begin with \"-\", found [ $arg ]."
			argName=""
			#  if arg starts with --, we assume it is a long-form argument name or flag
			if [ ${arg:0:2} == "--" ]; then
				arg=${arg#--}
				apply_arg $arg	
			else # only single -, we assume it is a short-form argument
				arg=${arg#-}
				#process each letter in arg, so multiple short form args can be stacked behind a single -
				for i in $(seq 0 $((${#arg} - 1)) ); do
					letter=${arg:$i:1}
					if index=$( index_of $letter ${shortArgName[@]})
						then apply_arg ${longArgName[${index}]}
						else exit_with_message "error: unrecognized short-form argument [ -$letter ]."
					fi
				done
			fi		
		# if arg starts with no dashes, we assume it must be the value for $argName
		else
			[ ${#argName} -eq 0 ] && exit_with_message "error: unnamed value [ $arg ]"
			if index=$( index_of $argName "${longArgName[@]}" )
				then parameters[ $index ]=${arg} && argName=""
				else exit_with_message "error: unrecognized argument name [ $argName ]"
			fi
		fi		
	done
	[ ${#argName} -gt 0 ] && containsElement $argName ${mustTakeValue[@]} && exit_with_message "error: argument [ $argName ] must take a value."
}

# Determine if an argument takes a value; if so, store the name and await the value
# otherwise the argument is a flag, set that parameter to true
# param1: the long-form argument name
apply_arg(){
	argsFromUser=(${argsFromUser[@]} $1)
	containsElement $1 ${canTakeValue[@]} && argName=$1
	set_flag_to_true $1
}

# Set a parameter value to true
# param1: name of flag to set
set_flag_to_true(){
	index=$( index_of $1 ${longArgName[@]} ) && parameters[${index}]="true"
	[ $index -eq "-1" ] && exit_with_message "error: unrecognized argument [ $1 ]."
}

# sets variables configFile and/or restartDir
assign_main_arg(){
	if ifArgUsed $RESTART_ARG ; then
		restartDir=$mainArg
		[ ${#BIOLOCKJ_TEST_MODE} -gt 0 ] && echo "Using $restartDir as the pipeline to restart."
		if ifArgUsed $CONFIG_ARG ; then
			configFile=$(get_arg_value $CONFIG_ARG)
			echo "Updating pipeline with config file $configFile."
		fi
	else
		configFile=$mainArg
		[ ${#BIOLOCKJ_TEST_MODE} -gt 0 ] && echo "Using $configFile as the config file."
	fi
}

# Only used when BIOLOCKJ_TEST_MODE is set.
display_arg_vals(){
	for ARG in ${longArgName[@]} ; do
		if ifArgUsed $ARG ; then
			argVal=$(get_arg_value $ARG)
			echo "$ARG = $argVal"
		fi
	done 
}

export_env_vars(){
	ifArgUsed $PROJ_ARG && BLJ_PROJ=$(get_arg_value $PROJ_ARG)
	if [ "${BLJ_PROJ: -1}" == "/" ]; then
		len=$((${#BLJ_PROJ}-1))
		BLJ_PROJ="${BLJ_PROJ:0:len}"
	fi
	export BLJ_PROJ
	if ifArgUsed $ENV_ARG ; then
		envVars=$(get_arg_value $ENV_ARG)
		vars=${envVars//,/" "}
		for v in ${vars[@]}; do
			$(string_contains "$v" "=") && hasEq=true || hasEq=false
			if [ $hasEq == "false" ]; then
				ifArgUsed $DOCKER_ARG && exit_with_message "Values for $ENV_ARG should take the form var=val; found [ $v ]."
				echo "Values for $ENV_ARG should take the form var=val; found [ $v ]." 
				echo "In this mode, this is equivilent to $v=\$$v, which is ok."
			fi
			export $v
		done
	fi
}



### These functions are used by the main scripts to querry user args

# Use this to set a value to true or false; remember these are strings, not logic values
# param 1: argument name (from longArgName array)
trueIfArgUsed(){
	if containsElement $1 ${argsFromUser[@]}
		then echo "true"
		else echo "false"
	fi
}

# Use this to control logic flow
# ex: ifArgUsed $BLJ_ARG && blj=$BLJ || blj=""
# param 1: argument name (from longArgName array)
ifArgUsed(){
	local tmp=$(trueIfArgUsed $1)
	[ $tmp == "true" ] && return 0
	[ $tmp == "false" ] && return 1
}

# Return the value that was passed after a given arg
# If the arg is not in the list of arg names, then return status 1 (ie, unsuccessful)
# param 1 - the arg name
get_arg_value(){
	index=$( index_of $1 ${longArgName[@]} ) && echo ${parameters[$index]} || return 1
}


### These functions are used to give info to the user

# Tell the user how to examine the pipeline they just launched
print_action_options(){
	echo "cd-blj       -> Move to pipeline output directory"
	echo "blj_log      -> Tail pipeline log (accepts tail runtime parameters)"
	echo "blj_summary  -> View module execution summary"
}

# Tell the user if/when the pipeline has finished checking dependencies.
# param 1 - The pipeline root directory
# param 2 - number of seconds to wait before timing out
print_pipeline_status_and_exit(){
	local pipeRootDir=$1
	echo ""
	printf "Fetching pipeline status "
	local i=0
	local maxtime=$2
	while [ $i -lt $maxtime ] || ifArgUsed $WAIT_ARG || ifArgUsed $PRECHECK ; do
		i=$((i+1))
		if [ -f ${pipeRootDir}/unverified.properties ] ; then
			echo ""; echo ""
			cat ${pipeRootDir}/unverified.properties
		fi
		if [ -f ${pipeRootDir}/biolockjFailed ] ; then 
			echo ""; echo ""
			echo "BioLockJ has stopped."
			echo ""
			cat ${pipeRootDir}/biolockjFailed
			echo ""; echo ""
			exit
		elif [ -f ${pipeRootDir}/precheckFailed ] ; then 
			echo ""; echo ""
			echo "There is a problem with this pipeline configuration."
			echo ""
			cat ${pipeRootDir}/precheckFailed
			echo ""; echo ""
			exit
		elif [ -f ${pipeRootDir}/biolockjComplete ]; then
			echo ""; echo ""
			echo "Pipeline is complete."
			echo ""
			exit
		elif [ -f ${pipeRootDir}/precheckComplete ]; then
			echo ""; echo ""
			echo "Precheck is complete. No problems were found in this pipeline configuration."
			echo ""
			exit
		elif [ -f ${pipeRootDir}/biolockjStarted ]; then
			echo ""; echo ""
			echo "Pipeline is running."
			echo ""
			exit
		elif [ $i -eq $maxtime ]; then
			if ifArgUsed $WAIT_ARG || ifArgUsed $PRECHECK ; then
				printf "(no timeout) "
			else
				printf "Reached max wait time: $maxtime seconds. "
			fi
		elif [ $i -gt 1 ]; then
			printf "."
		fi
		sleep 1
	done
	echo ""
	echo "Could not verify that the pipeline is running."
	echo "It may still be checking dependencies."
}

# Display BioLockJ release version
display_version() {
	[ -f "${BLJ}/.version" ] && cat "${BLJ}/.version" && return
	echo "Missing ${BLJ}/.version"
}

# Show the help menu
display_help() {
	set_arg_names
	init_defaults
	addSpace(){
		if [ ${#BIOLOCKJ_TEST_MODE} -gt 0 ]; then
			local allargs=(${longArgName[@]} help version)
			if ! containsElement $1 ${allargs[@]} ; then 
				echo "$1 may not be supported!"
			fi
		fi
		if containsElement $1 ${takeShortArg[@]}
			then addSpaceWithShort "${@}"
			else addSpaceNoShortArg "${@}"
		fi
	}
	addSpaceWithShort(){ 
		printf '%-1s %-3s %-25s %-10s\n' "" "-${1:0:1}" "--$1" "$2"
	}
	addSpaceNoShortArg(){ 
		printf '%-1s %-3s %-25s %-10s\n' "" "" "--$1" "$2"
	}
	continueDescription(){
		printf '%-1s %-3s %-25s %-10s\n' "" "" "" "$1"
	}
	echo ""
	echo "BioLockJ $(display_version) - UNCC Fodor Lab July 2018" 
    echo 'Usage:'
    printf '%-1s %-3s' "" "biolockj [options] <config|pipeline>" && echo ""
    echo ""
    echo 'Options:'
    addSpace "version"       "Show version"
    addSpace "help"          "Show help menu"
    addSpace "$PRECHECK"     "Set up pipeline and check dependencies and then STOP;"
    continueDescription      "do not execute the pipeline. This is helpful when testing edits to config files."
    addSpace "$RESTART_ARG"  "Resume an existing pipeline"
    addSpace "$CONFIG_ARG <file>" "New config file (if restarting a pipeline)"
    addSpace "$PASSWORD_ARG <password>" "Encrypt password"
    addSpace "$DOCKER_ARG"   "Run in docker"
    addSpace "$AWS_ARG"      "Run on aws"
    addSpace "$GUI_ARG"      "Start the BioLockJ GUI"
    addSpace "$FG_ARG"       "Run the java process in the foreground without nohup"
    addSpace "$WAIT_ARG"     "Do not release terminal until pipeline completes check-dependencies step."
    addSpace "$EXT_MODS_ARG <dir>" "Directory with compiled java code giving additional modules"
    addSpace "$BLJ_ARG"      "Map \$BLJ folder into the docker container;"
    continueDescription      "this replaces BioLockJ packaged in a docker container with the local copy."
    addSpace "$ENV_ARG <var=val>"      "Environment variables to be passed to the BioLockJ environment."
    continueDescription      "Can be a comma-sep list. Values take the form: a=foo,b=bar,c=baz"
    addSpace "$PROJ_ARG <dir>" "Directory that contains BioLockJ pipelines. If not supplied, "
    continueDescription "biolockj will use the value of environment variable \"BLJ_PROJ\"."
    echo ""
}

